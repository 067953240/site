- load staticfiles
- load markdown_trois_tags
- load mptt_tags

script(type='text/javascript', src='{% static "jquery-cookie.js" %}')
script(type='text/javascript')
    $(document).ready(function () {
        function csrfSafeMethod(method) {
            // these HTTP methods do not require CSRF protection
            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
        }

        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", $.cookie('csrftoken'));
                }
            }
        });

        window.comment_set_parent = function (parent) {
            $('form#comment-submit input#id_parent').val(parent);
            $('form#comment-submit input#id_title').val('Re: ' + $('#comment-' + parent + ' .comment-title').first().text());
        };

        function ajax_vote(url, id, delta) {
            return $.ajax({
                url: url,
                type: "POST",
                data: {
                    id: id
                },
                success: function (data, textStatus, jqXHR) {
                    var score = $('#comment-' + id + ' .comment-score').first();
                    score.text(parseInt(score.text()) + delta);
                },
                error: function (data, textStatus, jqXHR) {
                    alert('Could not vote: ' + data.responseText);
                }
            });
        }

        window.comment_upvote = function (id) {
            ajax_vote('{% url "judge.views.upvote_comment" %}', id, 1);
        };

        window.comment_downvote = function (id) {
            ajax_vote('{% url "judge.views.downvote_comment" %}', id, -1);
        };
    });

ul.comments.top-level-comments
    if has_comments
        - var logged_in = request.user.is_authenticated
        if logged_in
            - var profile = request.user.profile
        - recursetree comment_list
            if not node.hidden
                li.comment(id='comment-{{ node.id }}')
                    .comment-box
                        div(style='float:left')
                            if request.user.is_authenticated
                                a.upvote-link(href='javascript:comment_upvote({{ node.id }})')
                            else
                                a.upvote-link(href='javascript:void(0)', title='Please login to vote')
                            br
                            .comment-score #{node.score}
                            if request.user.is_authenticated
                                a.downvote-link(href='javascript:comment_downvote({{ node.id }})')
                            else
                                a.downvote-link(href='javascript:void(0)', title='Please login to vote')
                            br
                        .comment-header
                            a.comment-link(name='comment-{{node.id}}-link')
                            span.comment-author
                                span(class=node.author.display_rank)
                                    a(href='{% url "judge.views.user" node.author.user.username %}') #{node.author.user.username}
                            = ' on '
                            span.comment-time #{node.time|date:"N j, o, g:i a"}
                            = ' '
                            span.comment-title #{node.title}
                            = ' '
                            span.comment-operation
                                a.history-link(data-featherlight='{% url "comment_history_ajax" node.id %}',
                                               href='{% url "comment_history" node.id %}') History
                                if logged_in
                                    - var can_edit = node.author.id == profile.id and not profile.mute
                                    = ' '
                                    if can_edit
                                        a.edit-link(data-featherlight='{% url "comment_edit_ajax" node.id %}',
                                                    href='{% url "comment_edit" node.id %}') Edit
                                    else
                                        a(href='javascript:comment_set_parent({{ node.id }})') Reply
                                    if perms.judge.change_comment
                                        = ' '
                                        if can_edit
                                            a(href='javascript:comment_set_parent({{ node.id }})') Reply
                                        else
                                            a.edit-link(data-featherlight='{% url "comment_edit_ajax" node.id %}',
                                                        href='{% url "comment_edit" node.id %}') Edit
                                        = ' '
                                        a(href='{% url "admin:judge_comment_change" node.id %}') Admin
                        .comment-body #{node.body|markdown:"comment"}
                        if not node.is_leaf_node 
                            ul.comments
                                | {{ children }}
        - endrecursetree
    else
        p There are no comments at the moment.

if request.user.is_authenticated and comment_form
    .form-area.comment-submit
        block comment_submit_title
            h3 New comment
            hr
        form#comment-submit(action='', method='post')
            - csrf_token
            | #{comment_form.non_field_errors}
            | #{comment_form.parent.errors}
            | #{comment_form.parent}
            .comment-post-wrapper
                #comment-form-title
                    | #{comment_form.title.errors}
                    | #{comment_form.title}
                #comment-form-body
                    | #{comment_form.body.errors}
                    | #{comment_form.body}
            hr
            input.button(style='float:right', type='submit', value='Post!')

script(type='text/javascript')
    $('.comments').find('a.edit-link').featherlight({
        afterOpen: function () {
            $('#comment-edit').submit(function(event) {
                event.preventDefault();
                var id = $("#comment-edit").find('.comment-id').text();
                var readback = $("#comment-edit").find('.read-back').text();
                $.post($(this).attr('action'), $(this).serialize()).done(function(data) {
                    $.featherlight.current().close();
                    $.ajax({
                        url: readback
                    }).done(function (data) {
                        $('#comment-' + id).find('.comment-body').first().html(data);
                    }).fail(function () {
                        console.log('Failed to update comment:' + id);
                    });
                });
            });
        }
    });
    $('.comments').find('a.history-link').featherlight({
        afterOpen: function () {
            if ('MathJax' in window)
                MathJax.Hub.Queue(['Typeset', MathJax.Hub, $('.featherlight-content').get(0)]);
        }
    });