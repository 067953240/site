extends base
- load staticfiles

block media
    link(rel='stylesheet', href='{% static "timezone-map.css" %}')
    style
        .map-inset { background: url('#{TIMEZONE_MAP}') 50% 50% }
    if TIMEZONE_BG
        style
            .map-wrap { background: #{TIMEZONE_BG} }

block body
    form.form-area(action='', method='post')
        -csrf_token
        table(border=0, style='text-align:left') #{form.as_table}
        hr
        button(style="float:right;", type='submit') Register!
        input(type='hidden', name='next', value=next)
    div.map-wrap
        div.map-inset
            div.map-axis-x
            div.map-axis-y

block bodyend
    script(type='text/javascript', src='{% static "moment.min.js" %}')
    script(type='text/javascript', src='{% static "moment-timezone.min.js" %}')
    script(type='text/javascript')
        $(function(){
            var $map = $('.map-inset'),
                $axisX = $('.map-axis-x'),
                $axisY = $('.map-axis-y'),
                $field = $('#id_timezone'),
                width = $map.outerWidth(),
                height = $map.outerHeight(),
                lastCenter,
                centers = [];

            $(window).resize(function () {
                width = $map.outerWidth();
                height = $map.outerHeight();
            }).resize();

            function changeCenter (center) {
                if (center === lastCenter) {
                    return;
                }
                if (lastCenter) {
                    lastCenter.deactivate();
                }
                center.activate();
                lastCenter = center;
            }

            function Center (data) {
                this.name = data.name;
                this.x = (180 + data.long) / 360;
                this.y = (90 - data.lat) / 180;
                this.dom = $('<span>').appendTo($map).css({
                    left: this.x * 100 + '%',
                    top: this.y * 100 + '%'
                });
                if (this.name === $field.val())
                    changeCenter(this);
            }

            Center.prototype = {
                distSqr : function (x, y) {
                    var dx = this.x - x,
                        dy = this.y - y;
                    return dx * dx + dy * dy;
                },
                activate : function () {
                    $field.val(this.name);
                    $axisX.css('left', this.x * 100 + '%');
                    $axisY.css('top', this.y * 100 + '%');
                },
                deactivate : function ()  {
                    this.dom.removeClass('active');
                }
            };

            $.getJSON('{% static "moment-timezone-meta.json" %}').then(function (data) {
                for (var name in data.zones) {
                    centers.push(new Center(data.zones[name]));
                }
            });

            $('.map-inset').click(function (e) {
                var offset = $(this).offset(),
                    x = e.pageX - offset.left,
                    y = e.pageY - offset.top,
                    px = x / width,
                    py = y / height,
                    dist,
                    closestDist = 100,
                    closestCenter,
                    i;

                for (i = 0; i < centers.length; i++) {
                    dist = centers[i].distSqr(px, py);
                    if (dist < closestDist) {
                        closestCenter = centers[i];
                        closestDist = dist;
                    }
                }

                if (closestCenter) {
                    changeCenter(closestCenter);
                }
            });
        });
